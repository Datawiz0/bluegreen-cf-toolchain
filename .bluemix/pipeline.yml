---
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${SAMPLE_REPO}
  triggers:
  - type: commit
  jobs:
  - name: Build
    type: builder
- name: DEPLOY
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: APP_URL
    value: undefined
    type: text
  - name: BLUE_APP_NAME
    value: undefined
    type: text
  - name: BLUE_APP_URL
    value: undefined
    type: text
  - name: BLUE_APP_DOMAIN
    value: undefined
    type: text
  jobs:
  - name: Blue deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      #set -x
      #CF_TRACE=true
      # copy the script below into your app code repo (e.g. ./scripts/cf_blue_deploy.sh) and 'source' it from your pipeline job
      #    source ./scripts/cf_blue_deploy.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/cf_blue_deploy.sh")
      # ------------------
      # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/cf_blue_deploy.sh

      # BLUE/GREEN DEPLOY STEP 1/3
      # Deploys a Cloud Foundry app on a test route, and exports the test app url
      # This script should be run in a CF deploy job, in a stage declaring env properties: BLUE_APP_NAME, BLUE_APP_URL and BLUE_APP_DOMAIN

      echo "Build environment variables:"
      echo "CF_APP=${CF_APP}"
      echo "BUILD_NUMBER=${BUILD_NUMBER}"
      echo "ARCHIVE_DIR=${ARCHIVE_DIR}"
      # also run 'env' command to find all available env variables
      # or learn more about the available environment variables at:
      # https://console.bluemix.net/docs/services/ContinuousDelivery/pipeline_deploy_var.html#deliverypipeline_environment

      # Compute a unique app name using the reserved CF_APP name (configured in the 
      # deployer or from the manifest.yml file), the build number, and a 
      # timestamp (allowing multiple deploys for the same build).
      export BLUE_APP_NAME="${CF_APP}-${BUILD_NUMBER}-$(date +%s)"

      echo "=========================================================="
      echo -e "DEPLOYING test blue app: ${BLUE_APP_NAME}"
      # push and start the application, granting it 180s for app to fully start
      cf push ${BLUE_APP_NAME} -t 180
      # alternatively, if you need to set env properties, use the commands below instead
      # cf push ${BLUE_APP_NAME} --no-start
      # cf set-env $BLUE_APP_NAME <property> <value>
      # cf start ${BLUE_APP_NAME}

      # retrieve the temp app domain and url
      cf apps | grep ${BLUE_APP_NAME}
      URL=$(cf app ${BLUE_APP_NAME} | grep urls: | awk '{print $2}')
      PREFIX="${BLUE_APP_NAME}."
      export BLUE_APP_DOMAIN=$( echo ${URL:${#PREFIX}} )
      export BLUE_APP_URL="http://$URL"

      echo "=========================================================="
      echo -e "DEPLOYED test blue app ${BLUE_APP_NAME}"
      echo -e "at: ${BLUE_APP_URL}"
      echo ""
      echo "Exported stage environment variables:"
      echo "BLUE_APP_NAME=${BLUE_APP_NAME}"
      echo "BLUE_APP_URL=${BLUE_APP_URL}"
      echo "BLUE_APP_DOMAIN=${BLUE_APP_DOMAIN}"
      # View logs
      #cf logs "${BLUE_APP_NAME}" --recent
  - name: Blue sanity check
    type: tester
    script: |
      #!/bin/bash
      # uncomment to debug the script
      #set -x
      #CF_TRACE=true
      # copy the script below into your app code repo (e.g. ./scripts/cf_blue_check.sh) and 'source' it from your pipeline job
      #    source ./scripts/cf_blue_check.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/cf_blue_check.sh")
      # ------------------
      # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/cf_blue_check.sh

      # BLUE/GREEN DEPLOY STEP 2/3
      # Verifies that test blue app is actually running. Typically this job would be followed by other functional test jobs 
      # targeting $TEMP_APP_URL. 
      # This script should be run in a CF test job, in a stage declaring env properties: BLUE_APP_NAME, BLUE_APP_URL and BLUE_APP_DOMAIN (set beforehand)

      echo "Build environment variables:"
      echo "CF_APP=${CF_APP}"
      echo "BUILD_NUMBER=${BUILD_NUMBER}"
      echo "BLUE_APP_NAME=${BLUE_APP_NAME}"
      echo "BLUE_APP_URL=${BLUE_APP_URL}"
      echo "BLUE_APP_DOMAIN=${BLUE_APP_DOMAIN}"

      # also run 'env' command to find all available env variables
      # or learn more about the available environment variables at:
      # https://console.bluemix.net/docs/services/ContinuousDelivery/pipeline_deploy_var.html#deliverypipeline_environment

      MAX_HEALTH_CHECKS=20
      EXPECTED_RESPONSE="200"
      echo "=========================================================="
      echo "SANITY CHECKING that the test blue app is ready to serve..."
      COUNT=0
      while [[ "${COUNT}" -lt "${MAX_HEALTH_CHECKS}" ]]
      do
      RESPONSE=$(curl -sIL -w "%{http_code}" -o /dev/null "${BLUE_APP_URL}")
      if [[ "${RESPONSE}" == "${EXPECTED_RESPONSE}" ]]; then
          echo -e "Got expected ${RESPONSE} RESPONSE"
          break
      else
          COUNT=$(( COUNT + 1 ))
          sleep 3
          echo -e "Waiting for response: ${EXPECTED_RESPONSE} ... Got ${RESPONSE} (${COUNT}/${MAX_HEALTH_CHECKS})"
      fi
      done
      if [[ "${COUNT}" == "${MAX_HEALTH_CHECKS}" ]]; then
        echo "Couldn't get ${EXPECTED_RESPONSE} RESPONSE. Discarding test blue app..."
        # Delete temporary route
        cf delete-route $DOMAIN -n ${BLUE_APP_NAME} -f
        # Stop temporary app
        cf stop ${BLUE_APP_NAME}
        exit 1
      fi
      echo "=========================================================="
      echo -e "SANITY CHECKED test blue app ${BLUE_APP_NAME}"
      echo -e "on temporary route: ${BLUE_APP_URL}"      
  - name: Green deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      #set -x
      #CF_TRACE=true
      # copy the script below into your app code repo (e.g. ./scripts/cf_green_deploy.sh) and 'source' it from your pipeline job
      #    source ./scripts/cf_green_deploy.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/cf_green_deploy.sh")
      # ------------------
      # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/cf_green_deploy.sh

      # BLUE/GREEN DEPLOY STEP 3/3
      # Finalizes the blue/green deployment by routing public traffic to the test blue app, deleting the test route, the old green app 
      # and renaming the test blue app to be the new green app.
      # This script should be run in a CF deploy job, in a stage declaring an env property: BLUE_APP_NAME, BLUE_APP_URL and BLUE_APP_DOMAIN. It will export the new APP_URL

      echo "Build environment variables:"
      echo "CF_APP=${CF_APP}"
      echo "BUILD_NUMBER=${BUILD_NUMBER}"
      echo "BLUE_APP_NAME=${BLUE_APP_NAME}"
      echo "BLUE_APP_URL=${BLUE_APP_URL}"
      echo "BLUE_APP_DOMAIN=${BLUE_APP_DOMAIN}"

      echo "=========================================================="
      echo "DETAILING test blue app"
      cf app ${BLUE_APP_NAME}

      echo "=========================================================="
      echo "MAPPING traffic to the new version by binding to the public host."
      cf map-route ${BLUE_APP_NAME} ${BLUE_APP_DOMAIN} -n ${CF_APP}
      # NOTE: The old version(s) is still taking traffic to avoid disruption in service.
      cf routes | { grep ${BLUE_APP_NAME} || true; }
      echo "Deleting the temporary route that was used for testing since it is no longer needed."
      cf unmap-route ${BLUE_APP_NAME} ${BLUE_APP_DOMAIN} -n ${BLUE_APP_NAME}
      cf delete-route ${BLUE_APP_DOMAIN} -n ${BLUE_APP_NAME} -f
      echo "=========================================================="
      echo "STOPPING the old green app"
      cf delete -f -r ${CF_APP}
      echo "=========================================================="
      echo "RENAMING the test blue app now it is public. It has become the new green app"
      cf rename ${BLUE_APP_NAME} ${CF_APP}
      echo "Public routes:"
      cf routes | { grep ${CF_APP} || true; }
      cf app ${CF_APP}
      export APP_URL=http://$(cf app ${CF_APP} | grep urls: | awk '{print $2}')
      echo "=========================================================="
      echo -e "SUCCESS ! You have executed a blue/green deployment of ${CF_APP}"
      echo -e "at: ${APP_URL}"

      # View logs
      #cf logs "${CF_APP}" --recent